{"mappings":"gfA0BA,IAAAA,EAAAC,EAAA,SAEMC,EAASC,SAASC,cAAc,SAClCC,EAAUF,SAASC,cAAc,gBACjCE,EAASH,SAASC,cAAc,eAChCG,EAAWJ,SAASC,cAAc,iBA6BtC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,YAEpBA,MArCPR,EAAOgB,iBAAiB,UAExB,SAAsBC,GACpBA,EAAEC,iBAQqB,IANvB,IAAIC,EAAQC,OAAOjB,EAAQkB,OACvBC,EAAOF,OAAOhB,EAAOiB,OACrBE,EAASH,OAAOf,EAASgB,OAIpBG,EAAW,EAAGA,GAAYD,EAAQC,GAAY,EAE1BlB,EAAbkB,EAAUL,GACrBM,MAAK,SAAAC,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MACjBV,EAAA6B,OAAOC,QAAQ,uBAAwCC,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,UAG9DsB,OAAM,SAAAJ,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MAClBV,EAAA6B,OAAOI,QAAQ,sBAAuCF,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,UAEhEW,GAASG,K","sources":["src/js/03-promises.js"],"sourcesContent":["// Напиши скрипт, который при сабмите формы вызывает функцию createPromise(position, delay) столько раз,\n// сколько ввели в поле amount. При каждом вызове передай ей номер создаваемого промиса (position) и задержку\n// учитывая введенную пользователем первую задержку (delay) и шаг (step).\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\n// Дополни код функции createPromise так, чтобы она возвращала один промис, который выполянется или\n// отклоняется через delay времени. Значением промиса должен быть объект, в котором будут свойства\n// position и delay со значениями одноименных параметров. Используй начальный код функции для выбора того,\n// что нужно сделать с промисом - выполнить или отклонить.\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formEl = document.querySelector('.form');\nlet delayEl = document.querySelector('[name=delay]');\nlet stepEl = document.querySelector('[name=step]');\nlet amountEl = document.querySelector('[name=amount]');\n\nformEl.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n\n  let delay = Number(delayEl.value);\n  let step = Number(stepEl.value);\n  let amount = Number(amountEl.value);\n\n  // Перебираем значения ввода\n\n  for (let position = 1; position <= amount; position += 1) {\n    // Функция возвращает один промис\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += step;\n  }\n}\n\n// Функция при сабмите вызывается столько раз, сколько ввели в поле amount\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$formEl","document","querySelector","$ce04d3a99e08e73b$var$delayEl","$ce04d3a99e08e73b$var$stepEl","$ce04d3a99e08e73b$var$amountEl","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","delay1","Number","value","step","amount","position1","then","param","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.14572957.js.map"}